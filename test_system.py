"""
Script de teste para verificar se o sistema est√° funcionando corretamente
"""

import sys
import os
from pathlib import Path

def test_imports():
    """
    Testa se todas as depend√™ncias est√£o instaladas
    """
    print("üîç Testando imports...")
    
    try:
        import streamlit
        print("‚úÖ Streamlit")
    except ImportError:
        print("‚ùå Streamlit n√£o encontrado")
        return False
    
    try:
        import openai
        print("‚úÖ OpenAI")
    except ImportError:
        print("‚ùå OpenAI n√£o encontrado")
        return False
    
    try:
        import psycopg2
        print("‚úÖ psycopg2 (PostgreSQL)")
    except ImportError:
        print("‚ùå psycopg2 n√£o encontrado")
        return False
    
    try:
        import pgvector
        print("‚úÖ pgvector")
    except ImportError:
        print("‚ùå pgvector n√£o encontrado")
        return False
    
    try:
        import PyPDF2
        print("‚úÖ PyPDF2")
    except ImportError:
        print("‚ùå PyPDF2 n√£o encontrado")
        return False
    
    try:
        import pdfplumber
        print("‚úÖ pdfplumber")
    except ImportError:
        print("‚ùå pdfplumber n√£o encontrado")
        return False
    
    try:
        import pytesseract
        print("‚úÖ pytesseract")
    except ImportError:
        print("‚ùå pytesseract n√£o encontrado")
        return False
    
    try:
        import fitz
        print("‚úÖ PyMuPDF")
    except ImportError:
        print("‚ùå PyMuPDF n√£o encontrado")
        return False
    
    return True

def test_configuration():
    """
    Testa se as configura√ß√µes est√£o corretas
    """
    print("\n‚öôÔ∏è  Testando configura√ß√µes...")
    
    try:
        from config.settings import OPENAI_API_KEY, PDF_FOLDER, EMBEDDINGS_FOLDER
        
        if not OPENAI_API_KEY:
            print("‚ö†Ô∏è  OPENAI_API_KEY n√£o configurada")
        else:
            print("‚úÖ OPENAI_API_KEY configurada")
        
        print(f"‚úÖ PDF_FOLDER: {PDF_FOLDER}")
        print(f"‚úÖ EMBEDDINGS_FOLDER: {EMBEDDINGS_FOLDER}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nas configura√ß√µes: {e}")
        return False

def test_modules():
    """
    Testa se os m√≥dulos do projeto podem ser importados
    """
    print("\nüì¶ Testando m√≥dulos do projeto...")
    
    try:
        from src.utils import setup_logging
        print("‚úÖ src.utils")
    except Exception as e:
        print(f"‚ùå src.utils: {e}")
        return False
    
    try:
        from src.pdf_processor import PDFProcessor
        print("‚úÖ src.pdf_processor")
    except Exception as e:
        print(f"‚ùå src.pdf_processor: {e}")
        return False
    
    try:
        from src.embeddings import EmbeddingManager
        print("‚úÖ src.embeddings")
    except Exception as e:
        print(f"‚ùå src.embeddings: {e}")
        return False
    
    try:
        from src.agent import SocialPhobiaAgent
        print("‚úÖ src.agent")
    except Exception as e:
        print(f"‚ùå src.agent: {e}")
        return False
    
    return True

def test_directories():
    """
    Testa se os diret√≥rios necess√°rios existem
    """
    print("\nüìÅ Testando diret√≥rios...")
    
    from config.settings import PDF_FOLDER, EMBEDDINGS_FOLDER
    
    if PDF_FOLDER.exists():
        print(f"‚úÖ PDF_FOLDER existe: {PDF_FOLDER}")
    else:
        print(f"‚ö†Ô∏è  PDF_FOLDER n√£o existe: {PDF_FOLDER}")
    
    if EMBEDDINGS_FOLDER.exists():
        print(f"‚úÖ EMBEDDINGS_FOLDER existe: {EMBEDDINGS_FOLDER}")
    else:
        print(f"‚ö†Ô∏è  EMBEDDINGS_FOLDER n√£o existe: {EMBEDDINGS_FOLDER}")
    
    return True

def test_ocr():
    """
    Testa se o Tesseract OCR est√° dispon√≠vel
    """
    print("\nüî§ Testando OCR...")
    
    try:
        import pytesseract
        version = pytesseract.get_tesseract_version()
        print(f"‚úÖ Tesseract OCR dispon√≠vel: {version}")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Tesseract OCR n√£o dispon√≠vel: {e}")
        print("   Para PDFs digitalizados, instale o Tesseract OCR")
        return False

def main():
    """
    Executa todos os testes
    """
    print("üß™ Iniciando testes do sistema...")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_configuration,
        test_modules,
        test_directories,
        test_ocr
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Erro no teste: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    print("üìä Resumo dos testes:")
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ Testes aprovados: {passed}/{total}")
    
    if passed == total:
        print("üéâ Todos os testes passaram! O sistema est√° pronto para uso.")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Configure sua OPENAI_API_KEY no arquivo .env")
        print("2. Adicione PDFs na pasta data/pdfs/")
        print("3. Execute: python main.py --process-pdfs")
        print("4. Execute: python main.py")
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique as depend√™ncias e configura√ß√µes.")
        print("\nüîß Para instalar depend√™ncias:")
        print("pip install -r requirements.txt")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
